{"version":3,"file":"static/js/642.af924853.chunk.js","mappings":"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","sources":["webpack://gallery-frontend/./src/components/ImageMenu/ImageMenu.module.scss?827b","components/ImageMenu/ImageMenu.tsx","components/Overlays/DeleteOverlay/DeleteOverlay.tsx","utils/stringTrimmer.ts","webpack://gallery-frontend/./src/components/Overlays/ShareOverlay/ShareOverlay.module.scss?85a8","components/Overlays/ShareOverlay/ShareOverlay.tsx","webpack://gallery-frontend/./src/components/TagEditor/TagEditor.module.scss?cef5","components/TagEditor/TagEditor.tsx","webpack://gallery-frontend/./src/components/TagList/TagList.module.scss?2a49","components/TagList/TagList.tsx","webpack://gallery-frontend/./src/components/Overlays/SelectOverlay/SelectOverlay.module.scss?a748","components/Overlays/SelectOverlay/SelectOverlay.tsx","webpack://gallery-frontend/./src/components/ImageCard/ImageCard.module.scss?c7fb","components/ImageCard/ImageCard.tsx","webpack://gallery-frontend/./src/components/Modals/Modal/Modal.module.scss?deb7","components/Modals/Modal/Modal.tsx","webpack://gallery-frontend/./src/views/Gallery/Gallery.module.scss?6d73","views/Gallery/GalleryView.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"imageMenuWrapper\":\"ImageMenu_imageMenuWrapper__RbDLE\",\"imageMenuButton\":\"ImageMenu_imageMenuButton__dlwkj\"};","import { Button } from \"../elements\";\r\nimport store from \"../../MST/store\";\r\nimport styles from \"./ImageMenu.module.scss\";\r\n\r\ninterface Props {\r\n  className?: string;\r\n  isOpened?: boolean;\r\n  groupMenuMode?: boolean;\r\n  modalImageMode?: boolean;\r\n  onDelete?: () => void;\r\n  onSelect?: () => void;\r\n  onEdit?: () => void;\r\n  onShare?: () => void;\r\n}\r\nconst ImageMenu: React.FC<Props> = ({\r\n  className,\r\n  isOpened = true,\r\n  groupMenuMode = false,\r\n  modalImageMode = false,\r\n  onDelete,\r\n  onEdit,\r\n  onShare,\r\n  onSelect,\r\n}) => {\r\n  const { toggleSelectAllImages, selectedImages } = store.imagesStoreSettings;\r\n  const buttonsTabIndex = isOpened ? 0 : -1;\r\n  return (\r\n    <div className={`${styles.imageMenuWrapper} ${className}`}>\r\n      {!modalImageMode && (\r\n        <Button\r\n          className={styles.imageMenuButton}\r\n          type=\"button\"\r\n          title=\"Select mode on/off\"\r\n          icon=\"icon_select\"\r\n          onClick={onSelect}\r\n          tabIndex={buttonsTabIndex}\r\n        />\r\n      )}\r\n      {groupMenuMode && (\r\n        <Button\r\n          className={styles.imageMenuButton}\r\n          type=\"button\"\r\n          title=\"Select / deselect all\"\r\n          icon=\"icon_select_all\"\r\n          onClick={toggleSelectAllImages}\r\n          tabIndex={buttonsTabIndex}\r\n        />\r\n      )}\r\n      {!groupMenuMode && (\r\n        <Button\r\n          className={styles.imageMenuButton}\r\n          type=\"button\"\r\n          title=\"Edit tags\"\r\n          icon=\"icon_edit\"\r\n          onClick={onEdit}\r\n          tabIndex={buttonsTabIndex}\r\n        />\r\n      )}\r\n      <Button\r\n        className={styles.imageMenuButton}\r\n        type=\"button\"\r\n        title=\"Share\"\r\n        icon=\"icon_share\"\r\n        disabled={groupMenuMode && !selectedImages.length}\r\n        onClick={onShare}\r\n        tabIndex={buttonsTabIndex}\r\n      />\r\n      <Button\r\n        className={styles.imageMenuButton}\r\n        type=\"button\"\r\n        title=\"Delete\"\r\n        icon=\"icon_delete\"\r\n        disabled={groupMenuMode && !selectedImages.length}\r\n        onClick={onDelete}\r\n        tabIndex={buttonsTabIndex}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageMenu;\r\n","import { useState } from \"react\";\r\nimport store from \"../../../MST/store\";\r\nimport { Button, Spinner } from \"../../elements\";\r\n\r\ninterface Props {\r\n  _id: string;\r\n  onCloseDeleteOverlay: () => void;\r\n  onConfirmDeleteOverlay?: () => void;\r\n}\r\n\r\nconst DeleteOverlay: React.FunctionComponent<Props> = ({\r\n  _id,\r\n  onCloseDeleteOverlay,\r\n  onConfirmDeleteOverlay,\r\n}) => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const { deleteImages, selectedListChange, clearSelectedList } =\r\n    store.imagesStoreSettings;\r\n\r\n  const deleteImageHandler = async () => {\r\n    setIsLoading(true);\r\n    selectedListChange(_id);\r\n    await deleteImages();\r\n    clearSelectedList();\r\n    onConfirmDeleteOverlay && onConfirmDeleteOverlay();\r\n  };\r\n\r\n  const closeDeleteOverlayHandler = () => {\r\n    onCloseDeleteOverlay();\r\n  };\r\n\r\n  return (\r\n    <div className=\"imageCardOverlay\">\r\n      <p className=\"imageCardOverlay-title\">\r\n        Sure you want to delete this item?\r\n      </p>\r\n      <div className=\"imageCardOverlay-buttonWrapper\">\r\n        <Button type=\"button\" text=\"Delete\" onClick={deleteImageHandler} />\r\n        <Button\r\n          type=\"button\"\r\n          text=\"Cancel\"\r\n          onClick={closeDeleteOverlayHandler}\r\n        />\r\n      </div>\r\n      {isLoading && <Spinner side={20} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DeleteOverlay;\r\n","/** Trims the incoming string by trimLength value of symbols, adding '...' in the end. */\r\n\r\nfunction stringTrimmer(value: string, trimLength: number) {\r\n  return value.slice(0, trimLength - 3).concat(\"...\");\r\n}\r\n\r\nexport default stringTrimmer;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"shareOverlay\":\"ShareOverlay_shareOverlay__cGOYJ\",\"option\":\"ShareOverlay_option__DLqqN\",\"shareOverlayTitle\":\"ShareOverlay_shareOverlayTitle__qEKRZ\",\"shareOverlayCheckbox\":\"ShareOverlay_shareOverlayCheckbox__edKCU\",\"openedTo\":\"ShareOverlay_openedTo__jvKcx\",\"addUserBtn\":\"ShareOverlay_addUserBtn__0WUda\",\"sharedByLinkBtn\":\"ShareOverlay_sharedByLinkBtn__Uh9D9\",\"standaloneShareLinkWrapper\":\"ShareOverlay_standaloneShareLinkWrapper__eNGzX\",\"standaloneShareLink\":\"ShareOverlay_standaloneShareLink__gN0eY\",\"linkRemoveBtn\":\"ShareOverlay_linkRemoveBtn__eeM4h\",\"buttonWrapper\":\"ShareOverlay_buttonWrapper__38mEy\"};","import React, { EventHandler, SyntheticEvent, useState } from \"react\";\r\nimport store from \"../../../MST/store\";\r\nimport TagEditor from \"../../TagEditor\";\r\nimport { Checkbox, Button, Tag } from \"../../elements\";\r\nimport { ImageOpenedToUserEntry } from \"types/common\";\r\nimport stringTrimmer from \"utils/stringTrimmer\";\r\nimport { popupNotice } from \"utils/popupNotice\";\r\nimport styles from \"./ShareOverlay.module.scss\";\r\n\r\ninterface Props {\r\n  _id: string;\r\n  isPublic: boolean;\r\n  openedTo: string[];\r\n  sharedByLink: boolean;\r\n  onCloseShareOverlay: () => void;\r\n  setIsLoading: (value: boolean) => void;\r\n}\r\n\r\nconst ShareOverlay: React.FC<Props> = ({\r\n  _id,\r\n  isPublic,\r\n  openedTo,\r\n  sharedByLink,\r\n  onCloseShareOverlay,\r\n  setIsLoading,\r\n}) => {\r\n  const { backendUrl } = store;\r\n  const { editImagesInfo, imagesMultiuserShare } = store.imagesStoreSettings;\r\n  const { userName, checkIfUserExistsByName } = store.userSettings;\r\n\r\n  const initialOpenedToEntries: ImageOpenedToUserEntry[] = openedTo.map(\r\n    (name) => ({ name, action: \"none\" })\r\n  );\r\n\r\n  const [isPublicState, setIsPublicState] = useState(isPublic);\r\n  const [isSharedByLinkState, setIsSharedByLinkState] = useState(sharedByLink);\r\n  const [openedToEntriesList, setOpenedToEntriesList] = useState(\r\n    initialOpenedToEntries\r\n  ); // For the imagesMultiuserShare - user names and action - to add or to remove the imagesOpenedToUser user property.\r\n  const [openedToOverlayIsOpen, setOpenedToOverlayIsOpen] = useState(false);\r\n\r\n  const openToOverlayOpenHandler = () => {\r\n    setOpenedToOverlayIsOpen(true);\r\n  };\r\n  const openToOverlayCloseHandler = () => {\r\n    setOpenedToOverlayIsOpen(false);\r\n  };\r\n\r\n  const publicStateChangeHandler = () => {\r\n    setIsPublicState(!isPublicState);\r\n  };\r\n\r\n  const userAddHandler = async (nameToAdd: string) => {\r\n    const userDoesExist = await checkIfUserExistsByName(nameToAdd);\r\n    if (nameToAdd === userName || !userDoesExist) return;\r\n\r\n    const indexOfEntry = openedToEntriesList.findIndex(\r\n      (entry) => entry.name === nameToAdd\r\n    );\r\n\r\n    if (indexOfEntry !== -1) {\r\n      const updatedEntriesList: ImageOpenedToUserEntry[] = [\r\n        ...openedToEntriesList,\r\n      ];\r\n      updatedEntriesList[indexOfEntry].action = \"add\";\r\n      setOpenedToEntriesList(updatedEntriesList);\r\n    } else {\r\n      setOpenedToEntriesList([\r\n        ...openedToEntriesList,\r\n        { name: nameToAdd, action: \"add\" },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  const userDelHandler = (nameToRemove: string) => {\r\n    const updatedEntriesList: ImageOpenedToUserEntry[] =\r\n      openedToEntriesList.map((entry) => {\r\n        if (entry.name === nameToRemove)\r\n          return { name: entry.name, action: \"remove\" };\r\n        return entry;\r\n      });\r\n    setOpenedToEntriesList(updatedEntriesList);\r\n  };\r\n\r\n  const acceptChangesHandler = async () => {\r\n    setIsLoading(true);\r\n    /*\r\n     *  Mapping the array of just user names for the image object openedTo property\r\n     *  and writing the updated image info from the backend to the corresponding images in store.\r\n     */\r\n    const openedToNamesList = getOpenegToNamesList();\r\n    await editImagesInfo([\r\n      {\r\n        _id,\r\n        imageInfo: {\r\n          isPublic: isPublicState,\r\n          openedTo: openedToNamesList,\r\n          sharedByLink: isSharedByLinkState,\r\n        },\r\n      },\r\n    ]);\r\n\r\n    /*\r\n     * Updating each users selectedUsersList list with the current image id.\r\n     * Performing this operation on the backend.\r\n     */\r\n    await imagesMultiuserShare([_id], openedToEntriesList);\r\n    onCloseShareOverlay();\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const getOpenegToNamesList = () =>\r\n    openedToEntriesList\r\n      .filter((entry) => entry.action !== \"remove\")\r\n      .map((entry) => entry.name);\r\n\r\n  const sharedByLinkStateCreateHandler = () => {\r\n    setIsSharedByLinkState(true);\r\n    popupNotice(\"Sharing link created. Click accept to activate it.\");\r\n  };\r\n  const sharedByLinkStateRemoveHandler = (e: SyntheticEvent) => {\r\n    e.stopPropagation();\r\n    setIsSharedByLinkState(false);\r\n    popupNotice(\"Sharing link removed. Click accept to deactivate it.\");\r\n  };\r\n\r\n  const shareLinkCopyHandler = () => {\r\n    navigator.clipboard.writeText(\r\n      backendUrl + \"/public/standaloneShare/\" + _id\r\n    );\r\n    popupNotice(\"Sharing link copied to clipboard.\");\r\n  };\r\n\r\n  return !openedToOverlayIsOpen ? (\r\n    <div className={`imageCardOverlay`}>\r\n      <div className={`${styles.shareOverlay}`}>\r\n        <p className={`imageCardOverlay-title ${styles.shareOverlayTitle}`}>\r\n          Image share options\r\n        </p>\r\n        <div className={styles.option}>\r\n          <label>\r\n            Make the image public.\r\n            <Checkbox\r\n              isChecked={isPublicState}\r\n              onChange={publicStateChangeHandler}\r\n              className={styles.shareOverlayCheckbox}\r\n            />\r\n          </label>\r\n        </div>\r\n        <div className={styles.option}>\r\n          <p className={styles.openedTo}>Is opened to users : </p>\r\n          {openedToEntriesList.map((entry) => {\r\n            if (entry.action === \"remove\") return null;\r\n            return <Tag key={entry.name} tagValue={entry.name} />;\r\n          })}\r\n          <Button\r\n            className={styles.addUserBtn}\r\n            text=\"Edit\"\r\n            title=\"Edit list of users with acces to this image\"\r\n            icon=\"icon_edit\"\r\n            onClick={openToOverlayOpenHandler}\r\n          />\r\n        </div>\r\n        <div className={styles.option}>\r\n          {isSharedByLinkState ? (\r\n            <div\r\n              className={styles.standaloneShareLinkWrapper}\r\n              onClick={shareLinkCopyHandler}\r\n            >\r\n              Sharing link:{\" \"}\r\n              <span className={styles.standaloneShareLink}>\r\n                {stringTrimmer(\r\n                  backendUrl + \"/public/standaloneShare/\" + _id,\r\n                  50\r\n                )}\r\n              </span>\r\n              <Button\r\n                className={`${styles.linkRemoveBtn} closeBtn`}\r\n                iconSize={10}\r\n                icon=\"icon_close\"\r\n                onClick={sharedByLinkStateRemoveHandler}\r\n              />\r\n            </div>\r\n          ) : (\r\n            <Button\r\n              type=\"button\"\r\n              className={styles.sharedByLinkBtn}\r\n              text=\"Generate sharing link\"\r\n              onClick={sharedByLinkStateCreateHandler}\r\n            />\r\n          )}\r\n        </div>\r\n        <div className={styles.buttonWrapper}>\r\n          <Button type=\"button\" text=\"Accept\" onClick={acceptChangesHandler} />\r\n          <Button type=\"button\" text=\"Cancel\" onClick={onCloseShareOverlay} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  ) : (\r\n    <TagEditor\r\n      tags={getOpenegToNamesList()}\r\n      closeHandle={openToOverlayCloseHandler}\r\n      onTagDelete={userDelHandler}\r\n      onAddTags={userAddHandler}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ShareOverlay;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"tagEditor\":\"TagEditor_tagEditor__RGvqH\",\"tagEditorInputFormBtn\":\"TagEditor_tagEditorInputFormBtn__aLVM9\",\"tagInputForm\":\"TagEditor_tagInputForm__zZLJ9\",\"newTagInput\":\"TagEditor_newTagInput__NgRZ6\"};","import React, { useState } from \"react\";\r\nimport TagList from \"../TagList\";\r\nimport { Button } from \"../elements\";\r\nimport styles from \"./TagEditor.module.scss\";\r\n\r\ninterface Props {\r\n  tags: string[];\r\n  closeHandle: () => void;\r\n  onTagDelete: (tagToDelete: string) => void;\r\n  onAddTags: (newTag: string) => void;\r\n}\r\n\r\nconst TagEditor: React.FC<Props> = ({\r\n  tags,\r\n  closeHandle,\r\n  onTagDelete,\r\n  onAddTags,\r\n}) => {\r\n  const [tagName, setTagName] = useState(\"\");\r\n\r\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setTagName(event.target.value);\r\n  };\r\n\r\n  const handleEnterPress = (event: React.KeyboardEvent) => {\r\n    if (event.code === \"Enter\") {\r\n      onAddTags(tagName);\r\n      setTagName(\"\");\r\n    }\r\n  };\r\n\r\n  const addTag = () => {\r\n    if (tagName) {\r\n      onAddTags(tagName);\r\n    }\r\n    setTagName(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className={`imageCardOverlay ${styles.tagEditor}`}>\r\n      <div className={styles.tagInputForm}>\r\n        <Button\r\n          type=\"button\"\r\n          title=\"Close tag editor\"\r\n          className=\"closeBtn\"\r\n          icon=\"icon_close\"\r\n          onClick={closeHandle}\r\n        />\r\n        <input\r\n          value={tagName}\r\n          type=\"text\"\r\n          maxLength={30}\r\n          className={styles.newTagInput}\r\n          onChange={handleInputChange}\r\n          onKeyPress={handleEnterPress}\r\n        />\r\n        <Button\r\n          type=\"button\"\r\n          className={styles.tagEditorInputFormBtn}\r\n          title=\"Add tag\"\r\n          icon=\"icon_plus\"\r\n          onClick={addTag}\r\n        />\r\n      </div>\r\n      <TagList tags={tags} isEditable={true} tagDelHandler={onTagDelete} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TagEditor;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"tagList\":\"TagList_tagList__rPF1Z\",\"listPlaceholder\":\"TagList_listPlaceholder__4BTLS\"};","import { Tag } from \"../elements\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport styles from \"./TagList.module.scss\";\r\n\r\ninterface Props {\r\n  tags: string[];\r\n  title?: string;\r\n  placeholder?: string;\r\n  isEditable?: boolean;\r\n  onDoubleClick?: () => void;\r\n  tagDelHandler?: (tagValue: string) => void;\r\n}\r\n\r\nconst TagList: React.FunctionComponent<Props> = ({\r\n  tags,\r\n  title,\r\n  placeholder,\r\n  isEditable,\r\n  onDoubleClick,\r\n  tagDelHandler,\r\n}) => {\r\n  return (\r\n    <ul\r\n      title={tags.length ? title : \"\"}\r\n      className={styles.tagList}\r\n      onDoubleClick={isEditable && onDoubleClick ? onDoubleClick : () => null}\r\n    >\r\n      {tags.length ? (\r\n        tags.map((tag, index) => (\r\n          <Tag\r\n            tagValue={tag}\r\n            key={index}\r\n            isDeletable={tagDelHandler && isEditable}\r\n            deleteTag={isEditable && tagDelHandler ? tagDelHandler : () => null}\r\n          />\r\n        ))\r\n      ) : (\r\n        <li className={styles.listPlaceholder}>{placeholder}</li>\r\n      )}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default observer(TagList);\r\n","// extracted by mini-css-extract-plugin\nexport default {\"selectOverlay\":\"SelectOverlay_selectOverlay__MoiQq\",\"checked\":\"SelectOverlay_checked__zmzsv\",\"selectCheckbox\":\"SelectOverlay_selectCheckbox__U7NyR\"};","import React from \"react\";\r\nimport { Checkbox } from \"../../elements\";\r\nimport styles from \"./SelectOverlay.module.scss\";\r\n\r\ninterface Props {\r\n  isSelected: boolean;\r\n  onSelectToggle: () => void;\r\n}\r\n\r\nconst SelectOverlay: React.FC<Props> = ({\r\n  isSelected = false,\r\n  onSelectToggle,\r\n}) => {\r\n  const toggleCheckImage = (e: React.MouseEvent | React.KeyboardEvent) => {\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n    onSelectToggle();\r\n  };\r\n  return (\r\n    <div\r\n      className={\r\n        isSelected\r\n          ? styles.selectOverlay + \" \" + styles.checked\r\n          : styles.selectOverlay\r\n      }\r\n      onClick={toggleCheckImage}\r\n      onKeyPress={toggleCheckImage}\r\n      tabIndex={0}\r\n    >\r\n      <Checkbox\r\n        title=\"check / uncheck\"\r\n        isChecked={isSelected}\r\n        onChange={toggleCheckImage}\r\n        className={\r\n          isSelected\r\n            ? styles.selectCheckbox + \" \" + styles.checked\r\n            : styles.selectCheckbox\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectOverlay;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"cardWrap\":\"ImageCard_cardWrap__k-g5e\",\"cardBackdrop\":\"ImageCard_cardBackdrop__BQgAI\",\"text\":\"ImageCard_text__jKCqu\",\"menu\":\"ImageCard_menu__OJ0JT\",\"imageMenuWrapper\":\"ImageCard_imageMenuWrapper__IsYHV\",\"isOpened\":\"ImageCard_isOpened__0W4SK\",\"imgWrap\":\"ImageCard_imgWrap__DZXhA\",\"menuButton\":\"ImageCard_menuButton__VhhIp\",\"imgInfo\":\"ImageCard_imgInfo__E2biY\",\"tagList\":\"ImageCard_tagList__FKG5s\",\"imgTag\":\"ImageCard_imgTag__gfZ+5\",\"addInfo\":\"ImageCard_addInfo__ZH4sU\",\"imgOverlay\":\"ImageCard_imgOverlay__PRMEl\",\"imageCardSpinner\":\"ImageCard_imageCardSpinner__hYqTO\"};","import React, { useState, useEffect, useCallback, useRef, memo } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport TagList from \"../TagList\";\r\nimport { Button, Spinner } from \"../elements\";\r\nimport TagEditor from \"../TagEditor\";\r\nimport ImageMenu from \"../ImageMenu\";\r\nimport DeleteOverlay from \"../Overlays/DeleteOverlay\";\r\nimport ShareOverlay from \"../Overlays/ShareOverlay\";\r\nimport SelectOverlay from \"../Overlays/SelectOverlay\";\r\nimport { ImageType } from \"../../MST/imagesStoreSettings\";\r\nimport store from \"../../MST/store\";\r\nimport styles from \"./ImageCard.module.scss\";\r\n\r\ninterface Props {\r\n  image: ImageType;\r\n  isSelected: boolean;\r\n  groupSelectMode: boolean;\r\n}\r\n\r\nconst ImageCard: React.FC<Props> = ({ image, isSelected, groupSelectMode }) => {\r\n  console.log(\"Image render\"); // just for debugging -  to be sure memoization works)\r\n\r\n  const {\r\n    getCurrentGalleryMode,\r\n    editImagesInfo,\r\n    groupSelectModeToggle,\r\n    selectedListChange,\r\n  } = store.imagesStoreSettings;\r\n  const { userName, userIsAuthenticated } = store.userSettings;\r\n  const { setModalOpen, setModalComponentType, setModalImageId } =\r\n    store.modalWindowsSettings;\r\n  const { _id, smallImageURL, imageInfo, toggleSelectImage } = image;\r\n  const { tags, likes, openedTo, sharedByLink, isPublic } = imageInfo;\r\n\r\n  const [deleteOverlayIsOpen, setDeleteOverlayIsOpen] = useState(false);\r\n  const [shareOverlayIsOpen, setShareOverlayIsOpen] = useState(false);\r\n  const [imageMenuIsOpen, setImageMenuIsOpen] = useState(false);\r\n  const [imgInfoIsLoading, setimgInfoIsLoading] = useState(false);\r\n  const [imageIsLoading, setImageIsLoading] = useState(true);\r\n  const [tagEditorOverlayIsOpen, setTagEditorOpen] = useState(false);\r\n\r\n  const imageMenuRef = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (!groupSelectMode) toggleSelectImage(false);\r\n    console.log(\"groupSelectMode effect\");\r\n  }, [groupSelectMode, toggleSelectImage]);\r\n\r\n  useEffect(() => {\r\n    if (imageMenuRef.current && imageMenuIsOpen) {\r\n      imageMenuRef.current.tabIndex = 0;\r\n      imageMenuRef.current.focus();\r\n    }\r\n    console.log(\"Image menu effect\");\r\n  }, [imageMenuIsOpen]);\r\n\r\n  const isUserMode = getCurrentGalleryMode === \"userGallery\";\r\n\r\n  const onImageLoad = () => {\r\n    setImageIsLoading(false);\r\n  };\r\n\r\n  const imageMenuToggleHandler = (e: React.SyntheticEvent) => {\r\n    e.stopPropagation();\r\n    setImageMenuIsOpen(!imageMenuIsOpen);\r\n  };\r\n  const imageMenuCloseHandler = (e: React.SyntheticEvent) => {\r\n    e.stopPropagation();\r\n    setImageMenuIsOpen(false);\r\n  };\r\n\r\n  const toggleImageSelect = () => {\r\n    toggleSelectImage(!isSelected);\r\n    selectedListChange(_id);\r\n  };\r\n\r\n  const imageModalOpenHandler = () => {\r\n    setModalImageId(_id);\r\n    setModalComponentType(\"image\");\r\n    setModalOpen(true);\r\n  };\r\n\r\n  const groupSelectOnHandler = useCallback(() => {\r\n    setImageMenuIsOpen(false);\r\n    groupSelectModeToggle();\r\n  }, [groupSelectModeToggle]);\r\n\r\n  const tagEditOpenHandler = useCallback(() => {\r\n    setTagEditorOpen(true);\r\n    setImageMenuIsOpen(false);\r\n  }, []);\r\n  const deleteOverlayOpenHandler = useCallback(() => {\r\n    setDeleteOverlayIsOpen(true);\r\n    setImageMenuIsOpen(false);\r\n  }, []);\r\n  const shareOverlayOpenHandler = useCallback(() => {\r\n    setShareOverlayIsOpen(true);\r\n    setImageMenuIsOpen(false);\r\n  }, []);\r\n\r\n  const onTagEditCloseHandler = () => setTagEditorOpen(false);\r\n  const deleteOverlayCloseHandler = () => setDeleteOverlayIsOpen(false);\r\n  const shareOverlayCloseHandler = () => setShareOverlayIsOpen(false);\r\n\r\n  const tagDelHandler = (tagToDelete: string) => {\r\n    const newTags = tags.filter((tag) => tag !== tagToDelete);\r\n    tagsUpdateHandler(newTags);\r\n  };\r\n  const tagAddHandler = (tagsToAdd: string) => {\r\n    const parsedTags = tagsToAdd.split(/,/).map((tag) => tag.trim());\r\n    tagsUpdateHandler([...tags, ...parsedTags]);\r\n  };\r\n  const tagsUpdateHandler = async (newTags: string[]) => {\r\n    setimgInfoIsLoading(true);\r\n    await editImagesInfo([{ _id, imageInfo: { tags: newTags } }]);\r\n    setimgInfoIsLoading(false);\r\n  };\r\n\r\n  const toggleLikeHandler = async () => {\r\n    console.log(\"toggleLikeHandler fires\");\r\n    setimgInfoIsLoading(true);\r\n    let newLikesList = [];\r\n    if (!likes.includes(userName)) {\r\n      newLikesList = [...likes, userName];\r\n    } else {\r\n      newLikesList = likes.filter((name) => name !== userName);\r\n    }\r\n    await editImagesInfo([{ _id, imageInfo: { likes: newLikesList } }]);\r\n    setimgInfoIsLoading(false);\r\n  };\r\n\r\n  const overlaysAreClosedCheck = () =>\r\n    !tagEditorOverlayIsOpen &&\r\n    !deleteOverlayIsOpen &&\r\n    !shareOverlayIsOpen &&\r\n    !groupSelectMode;\r\n\r\n  return (\r\n    <div\r\n      className={styles.cardWrap}\r\n      tabIndex={groupSelectMode ? -1 : 0}\r\n      onMouseLeave={imageMenuCloseHandler}\r\n    >\r\n      {!imgInfoIsLoading ? (\r\n        <>\r\n          <div\r\n            className={styles.cardBackdrop}\r\n            style={{\r\n              backgroundImage: `url(${smallImageURL})`,\r\n              visibility: !imageIsLoading ? \"visible\" : \"hidden\",\r\n            }}\r\n          ></div>\r\n          <div\r\n            tabIndex={-1}\r\n            className={styles.imgWrap}\r\n            onClick={imageModalOpenHandler}\r\n          >\r\n            {imageIsLoading && <Spinner side={50} />}\r\n            <img\r\n              className={styles.image}\r\n              src={smallImageURL}\r\n              alt={_id}\r\n              onLoad={onImageLoad}\r\n              style={{ visibility: !imageIsLoading ? \"visible\" : \"hidden\" }}\r\n            />\r\n          </div>\r\n          {overlaysAreClosedCheck() && !groupSelectMode && (\r\n            <>\r\n              <div className={styles.menu}>\r\n                <Button\r\n                  type=\"button\"\r\n                  icon=\"icon_like\"\r\n                  onClick={toggleLikeHandler}\r\n                  className={styles.menuButton}\r\n                  text={likes.length}\r\n                  disabled={!userIsAuthenticated}\r\n                  title=\"Like / Dislike\"\r\n                />\r\n\r\n                {isUserMode && (\r\n                  <>\r\n                    <div\r\n                      ref={imageMenuRef}\r\n                      className={\r\n                        imageMenuIsOpen\r\n                          ? styles.imageMenuWrapper + \" \" + styles.isOpened\r\n                          : styles.imageMenuWrapper\r\n                      }\r\n                    >\r\n                      <ImageMenu\r\n                        isOpened={imageMenuIsOpen}\r\n                        onDelete={deleteOverlayOpenHandler}\r\n                        onEdit={tagEditOpenHandler}\r\n                        onSelect={groupSelectOnHandler}\r\n                        onShare={shareOverlayOpenHandler}\r\n                      />\r\n                    </div>\r\n\r\n                    <div style={{ position: \"relative\" }}>\r\n                      <Button\r\n                        type=\"button\"\r\n                        title=\"Image menu\"\r\n                        icon=\"icon_settings\"\r\n                        onClick={imageMenuToggleHandler}\r\n                        className={styles.menuButton}\r\n                      />\r\n                    </div>\r\n                  </>\r\n                )}\r\n              </div>\r\n              <div className={styles.text}>\r\n                <div className={styles.imgCardText}>\r\n                  <TagList\r\n                    tags={tags}\r\n                    title={isUserMode ? \"Double click to edit\" : \"No tags\"}\r\n                    placeholder={\r\n                      isUserMode ? \"Double click to add tags\" : \"No tags\"\r\n                    }\r\n                    isEditable={true}\r\n                    onDoubleClick={isUserMode ? tagEditOpenHandler : () => null}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </>\r\n          )}\r\n        </>\r\n      ) : (\r\n        <Spinner side={30} className={styles.imageCardSpinner} />\r\n      )}\r\n\r\n      {!overlaysAreClosedCheck() && (\r\n        <div className={styles.imgOverlay}>\r\n          {\" \"}\r\n          {tagEditorOverlayIsOpen && (\r\n            <TagEditor\r\n              tags={tags}\r\n              closeHandle={onTagEditCloseHandler}\r\n              onTagDelete={tagDelHandler}\r\n              onAddTags={tagAddHandler}\r\n            />\r\n          )}\r\n          {deleteOverlayIsOpen && (\r\n            <DeleteOverlay\r\n              _id={_id}\r\n              onCloseDeleteOverlay={deleteOverlayCloseHandler}\r\n            />\r\n          )}\r\n          {shareOverlayIsOpen && (\r\n            <ShareOverlay\r\n              _id={_id}\r\n              isPublic={isPublic}\r\n              openedTo={openedTo}\r\n              sharedByLink={sharedByLink}\r\n              onCloseShareOverlay={shareOverlayCloseHandler}\r\n              setIsLoading={setimgInfoIsLoading}\r\n            />\r\n          )}\r\n          {groupSelectMode && (\r\n            <SelectOverlay\r\n              isSelected={isSelected}\r\n              onSelectToggle={toggleImageSelect}\r\n            />\r\n          )}\r\n          {imgInfoIsLoading && (\r\n            <Spinner side={30} className={styles.imageCardSpinner} />\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(observer(ImageCard));\r\n","// extracted by mini-css-extract-plugin\nexport default {\"modalBackdrop\":\"Modal_modalBackdrop__6HAsx\",\"isOpened\":\"Modal_isOpened__1g212\"};","import React, { useState, useEffect, useCallback, lazy, Suspense } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { createPortal } from \"react-dom\";\r\nimport { Spinner } from \"components/elements\";\r\nimport store from \"../../../MST/store\";\r\nimport styles from \"./Modal.module.scss\";\r\n\r\nconst ModalUpload = lazy(() => import(\"../ModalUpload\"));\r\nconst ModalDelete = lazy(() => import(\"../ModalDelete\"));\r\nconst ModalShare = lazy(() => import(\"../ModalShare\"));\r\nconst ModalImage = lazy(() => import(\"../ModalImage\"));\r\nconst ModalMenu = lazy(() => import(\"../ModalMenu\"));\r\n\r\nconst modalRoot = document.querySelector(\"#modal-root\")!;\r\n\r\ninterface Props {\r\n  style?: any;\r\n}\r\n\r\nconst Modal: React.FunctionComponent<Props> = () => {\r\n  const {\r\n    modalComponentType,\r\n    modalIsOpened,\r\n    setModalOpen,\r\n    setModalComponentType,\r\n  } = store.modalWindowsSettings;\r\n\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const modalBackdropClose = useCallback(\r\n    (event: any) => {\r\n      if (event.target === event.currentTarget || event.key === \"Escape\") {\r\n        modalCloseHandle();\r\n      }\r\n    },\r\n    [setModalOpen, setModalComponentType]\r\n  );\r\n\r\n  const modalCloseHandle = () => {\r\n    setModalOpen(false);\r\n    setModalComponentType(\"none\");\r\n  };\r\n\r\n  const getCurrentModalComponent = () => {\r\n    switch (modalComponentType) {\r\n      case \"image\":\r\n        return <ModalImage />;\r\n      case \"delete\":\r\n        return (\r\n          <ModalDelete\r\n            isLoading={isLoading}\r\n            setIsLoading={setIsLoading}\r\n            modalCloseHandle={modalCloseHandle}\r\n          />\r\n        );\r\n      case \"share\":\r\n        return (\r\n          <ModalShare\r\n            isLoading={isLoading}\r\n            setIsLoading={setIsLoading}\r\n            modalCloseHandle={modalCloseHandle}\r\n          />\r\n        );\r\n      case \"upload\":\r\n        return (\r\n          <ModalUpload\r\n            isLoading={isLoading}\r\n            setIsLoading={setIsLoading}\r\n            modalCloseHandle={modalCloseHandle}\r\n          />\r\n        );\r\n      case \"menu\":\r\n        return <ModalMenu modalCloseHandle={modalCloseHandle} />;\r\n      case \"none\":\r\n        return null;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (modalIsOpened && !isLoading)\r\n      window.addEventListener(\"keydown\", modalBackdropClose);\r\n    return function cleanup() {\r\n      window.removeEventListener(\"keydown\", modalBackdropClose);\r\n    };\r\n  }, [modalIsOpened, modalBackdropClose, isLoading]);\r\n\r\n  return createPortal(\r\n    <div\r\n      className={\r\n        modalIsOpened\r\n          ? styles.modalBackdrop + \" \" + styles.isOpened\r\n          : styles.modalBackdrop\r\n      }\r\n      onClick={modalBackdropClose}\r\n    >\r\n      <Suspense fallback={<Spinner side={50} />}>\r\n        {\" \"}\r\n        {getCurrentModalComponent()}\r\n      </Suspense>\r\n    </div>,\r\n    modalRoot\r\n  );\r\n};\r\n\r\nexport default observer(Modal);\r\n","// extracted by mini-css-extract-plugin\nexport default {\"sectionGallery\":\"Gallery_sectionGallery__cUG3t\",\"groupSelectMode\":\"Gallery_groupSelectMode__IWNlk\",\"galleryPage\":\"Gallery_galleryPage__4rWwl\",\"groupImageMenuWrapper\":\"Gallery_groupImageMenuWrapper__l3Nwn\"};","import { useState, useEffect, useCallback } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport ImageCard from \"../../components/ImageCard\";\r\nimport ImageMenu from \"../../components/ImageMenu\";\r\nimport Modal from \"../../components/Modals/Modal/Modal\";\r\nimport { Spinner } from \"../../components/elements\";\r\nimport store from \"../../MST/store\";\r\nimport { GalleryType } from \"types/images\";\r\nimport { ImageType } from \"MST/imagesStoreSettings\";\r\nimport styles from \"./Gallery.module.scss\";\r\n\r\ninterface Props {\r\n  label: GalleryType;\r\n}\r\n\r\nfunction GalleryView({ label }: Props) {\r\n  const [imgArray, setImgArray] = useState<ImageType[]>([]);\r\n  const {\r\n    setGalleryMode,\r\n    imageStoreInit,\r\n    getUserImages,\r\n    groupSelectMode,\r\n    groupSelectModeToggle,\r\n    clearSelectedList,\r\n    isLoading,\r\n  } = store.imagesStoreSettings;\r\n  const { setModalComponentType, setModalOpen } = store.modalWindowsSettings;\r\n\r\n  useEffect(() => {\r\n    imageStoreInit(label).then(() => setImgArray(getUserImages));\r\n  }, [imageStoreInit, setGalleryMode, getUserImages, label]);\r\n\r\n  const groupModeHandler = useCallback(() => {\r\n    clearSelectedList();\r\n    groupSelectModeToggle();\r\n  }, [clearSelectedList, groupSelectModeToggle]);\r\n\r\n  const groupDeleteHandler = useCallback(() => {\r\n    setModalComponentType(\"delete\");\r\n    setModalOpen(true);\r\n  }, [setModalComponentType, setModalOpen]);\r\n\r\n  const groupShareHandler = useCallback(() => {\r\n    setModalComponentType(\"share\");\r\n    setModalOpen(true);\r\n  }, [setModalComponentType, setModalOpen]);\r\n\r\n  return isLoading ? (\r\n    <Spinner side={100} />\r\n  ) : (\r\n    <section\r\n      className={\r\n        groupSelectMode\r\n          ? styles.sectionGallery + \" \" + styles.groupSelectMode\r\n          : styles.sectionGallery\r\n      }\r\n    >\r\n      {imgArray.length ? (\r\n        <>\r\n          <div\r\n            className={\r\n              groupSelectMode\r\n                ? styles.groupImageMenuWrapper + \" \" + styles.groupSelectMode\r\n                : styles.groupImageMenuWrapper\r\n            }\r\n          >\r\n            <ImageMenu\r\n              isOpened={groupSelectMode}\r\n              groupMenuMode={true}\r\n              onSelect={groupModeHandler}\r\n              onDelete={groupDeleteHandler}\r\n              onShare={groupShareHandler}\r\n            />\r\n          </div>\r\n\r\n          <div className={styles.galleryPage}>\r\n            {imgArray.map((image) => {\r\n              console.log(\"render cards\");\r\n              return (\r\n                <ImageCard\r\n                  image={image}\r\n                  key={image._id}\r\n                  isSelected={image.isSelected}\r\n                  groupSelectMode={groupSelectMode}\r\n                />\r\n              );\r\n            })}\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <Spinner side={100} />\r\n      )}\r\n      <Modal />\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default observer(GalleryView);\r\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["className","isOpened","groupMenuMode","modalImageMode","onDelete","onEdit","onShare","onSelect","store","toggleSelectAllImages","selectedImages","buttonsTabIndex","styles","type","title","icon","onClick","tabIndex","disabled","length","_id","onCloseDeleteOverlay","onConfirmDeleteOverlay","useState","isLoading","setIsLoading","deleteImages","selectedListChange","clearSelectedList","deleteImageHandler","text","side","value","trimLength","slice","concat","isPublic","openedTo","sharedByLink","onCloseShareOverlay","backendUrl","editImagesInfo","imagesMultiuserShare","userName","checkIfUserExistsByName","initialOpenedToEntries","map","name","action","isPublicState","setIsPublicState","isSharedByLinkState","setIsSharedByLinkState","openedToEntriesList","setOpenedToEntriesList","openedToOverlayIsOpen","setOpenedToOverlayIsOpen","userAddHandler","nameToAdd","userDoesExist","indexOfEntry","findIndex","entry","updatedEntriesList","acceptChangesHandler","openedToNamesList","getOpenegToNamesList","imageInfo","filter","TagEditor","tags","closeHandle","onTagDelete","nameToRemove","onAddTags","isChecked","onChange","tagValue","navigator","clipboard","writeText","popupNotice","stringTrimmer","iconSize","e","stopPropagation","tagName","setTagName","maxLength","event","target","onKeyPress","code","TagList","isEditable","tagDelHandler","observer","placeholder","onDoubleClick","tag","index","isDeletable","deleteTag","isSelected","onSelectToggle","toggleCheckImage","preventDefault","memo","image","groupSelectMode","console","log","getCurrentGalleryMode","groupSelectModeToggle","userIsAuthenticated","setModalOpen","setModalComponentType","setModalImageId","smallImageURL","toggleSelectImage","likes","deleteOverlayIsOpen","setDeleteOverlayIsOpen","shareOverlayIsOpen","setShareOverlayIsOpen","imageMenuIsOpen","setImageMenuIsOpen","imgInfoIsLoading","setimgInfoIsLoading","imageIsLoading","setImageIsLoading","tagEditorOverlayIsOpen","setTagEditorOpen","imageMenuRef","useRef","useEffect","current","focus","isUserMode","groupSelectOnHandler","useCallback","tagEditOpenHandler","deleteOverlayOpenHandler","shareOverlayOpenHandler","tagsUpdateHandler","newTags","toggleLikeHandler","newLikesList","includes","overlaysAreClosedCheck","onMouseLeave","style","backgroundImage","visibility","src","alt","onLoad","ref","ImageMenu","position","tagToDelete","tagsToAdd","parsedTags","split","trim","DeleteOverlay","ShareOverlay","ModalUpload","lazy","ModalDelete","ModalShare","ModalImage","ModalMenu","modalRoot","document","querySelector","modalComponentType","modalIsOpened","modalBackdropClose","currentTarget","key","modalCloseHandle","window","addEventListener","removeEventListener","createPortal","Suspense","fallback","getCurrentModalComponent","label","imgArray","setImgArray","setGalleryMode","imageStoreInit","getUserImages","then","groupModeHandler","groupDeleteHandler","groupShareHandler","asyncGeneratorStep","gen","resolve","reject","_next","_throw","arg","info","error","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}