{"version":3,"file":"static/js/513.37bd053f.chunk.js","mappings":"mQACA,GAAgB,eAAiB,mCAAmC,iBAAiB,mCAAmC,mBAAqB,uCAAuC,OAAS,2BAA2B,KAAO,yBAAyB,WAAa,+BAA+B,cAAgB,kCAAkC,wBAAwB,2C,SC2J9W,EAnJ+C,SAAC,GAIzC,IAHLA,EAGI,EAHJA,UACAC,EAEI,EAFJA,aACAC,EACI,EADJA,iBAEA,GAA0CC,EAAAA,EAAAA,WAAS,GAAnD,eAAOC,EAAP,KAAsBC,EAAtB,KACA,GAA8CF,EAAAA,EAAAA,UAAmB,IAAjE,eAAOG,EAAP,KAAwBC,EAAxB,KACA,GAA0DJ,EAAAA,EAAAA,WAAS,GAAnE,eAAOK,EAAP,KAA8BC,EAA9B,KACA,EAOIC,EAAAA,EAAAA,oBANFC,EADF,EACEA,eACAC,EAFF,EAEEA,eACAC,EAHF,EAGEA,aACAC,EAJF,EAIEA,kBACAC,EALF,EAKEA,sBACAC,EANF,EAMEA,qBAEF,EAA8CN,EAAAA,EAAAA,aAAtCO,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,wBAYZC,EAAc,mCAAG,WAAOC,GAAP,oEACjBA,IAASH,EADQ,iEAEOC,EAAwBE,GAF/B,gBAGCd,EAAgBe,SAASD,IAC7Cb,EAAmB,GAAD,eAAKD,GAAL,CAAsBc,KAJrB,2CAAH,sDAqBdE,EAAoB,mCAAG,+FAC3BrB,GAAgBA,GAAa,GAEvBsB,EAAmBZ,EAAea,KAAI,SAACC,GAAD,OAAWA,EAAMC,cACvDC,EAAwCJ,EAAiBC,KAC7D,SAACE,GACC,IACME,EADef,EAAaa,GACGG,UAAUC,SACzCC,GAAa,OACd,IAAIC,IAAJ,kBAAYJ,IAAZ,OAAgCtB,MAMrC,MAJuC,CACrC2B,IAAKP,EACLG,UAAW,CAAEK,SAAU9B,EAAe0B,SAAUC,OAb3B,SAsBrBnB,EAAee,GAtBM,cA8BrBQ,EAAsC7B,EAAgBkB,KAAI,SAACJ,GAAD,MAAW,CACzEA,KAAAA,EACAgB,OAAQ,UAhCiB,SAuCrBpB,EAAqBO,EAAkBY,GAvClB,OAwC3BlC,GAAgBA,GAAa,GAC7BC,IACAY,IACAC,IA3C2B,4CAAH,qDA8C1B,OACE,iBAAKsB,UAAWC,EAAAA,eAAhB,WACI9B,IAA0BR,IAC1B,iCACE,6CACA,iBAAKqC,UAAWC,EAAAA,eAAhB,WACE,iBAAKD,UAAWC,EAAAA,OAAhB,WACE,SAAC,KAAD,CACED,UAAWC,EAAAA,mBACXC,SA/EmB,WAC/BlC,GAAkBD,IA+ENoC,UAAWpC,IAJf,6BAQA,iBAAKiC,UAAWC,EAAAA,OAAhB,WACE,cAAGD,UAAWC,EAAAA,SAAd,mCACChC,EAAgBkB,KAAI,SAACiB,EAAOC,GAAR,OACnB,SAAC,KAAD,CAAiBC,SAAUF,GAAjBC,OAEZ,SAAC,KAAD,CACEL,UAAWC,EAAAA,WACXM,KAAK,OACLC,MAAM,8CACNC,KAAK,YACLC,QArGmB,WAC/BtC,GAAyB,aAwGnB,iBAAK4B,UAAWC,EAAAA,cAAhB,WACE,SAAC,KAAD,CACEM,KAAK,SACLI,KAAK,SACLD,QAASzB,KAEX,SAAC,KAAD,CAAQsB,KAAK,SAASG,QA3FV,WACpBjC,IACAC,IACAb,aA6FGM,IAA0BR,IACzB,SAACiD,EAAA,EAAD,CACEC,KAAM5C,EACN6C,YApH0B,WAChC1C,GAAyB,IAoHnB2C,UAAWjC,EACXkC,YAzGkB,SAACjC,GACzBb,EAAmBD,EAAgBgD,QAAO,SAACrC,GAAD,OAAcA,IAAaG,SA2GlEpB,IAAa,SAAC,KAAD,CAASuD,KAAM","sources":["webpack://gallery-frontend/./src/components/Modals/ModalShare/ModalShare.module.scss?9b75","components/Modals/ModalShare/ModalShare.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"modalShareForm\":\"ModalShare_modalShareForm__gRbfd\",\"form-animation\":\"ModalShare_form-animation__Zw5Hj\",\"shareModalCheckbox\":\"ModalShare_shareModalCheckbox__Q2JAE\",\"option\":\"ModalShare_option__jNsBS\",\"text\":\"ModalShare_text__bIo7Z\",\"addUserBtn\":\"ModalShare_addUserBtn__8c9o+\",\"buttonWrapper\":\"ModalShare_buttonWrapper__JNub6\",\"mobile-form-animation\":\"ModalShare_mobile-form-animation__7nGQU\"};","import React, { useState } from \"react\";\r\nimport { Checkbox, Button, Tag, Spinner } from \"components/elements\";\r\nimport TagEditor from \"components/TagEditor\";\r\nimport store from \"MST/store\";\r\nimport { NewImageInfoType } from \"types/images\";\r\nimport { ImageOpenedToUserEntry } from \"types/common\";\r\nimport { ModalWindowProps } from \"types/modal\";\r\nimport styles from \"./ModalShare.module.scss\";\r\n\r\nconst ModalShare: React.FC<ModalWindowProps> = ({\r\n  isLoading,\r\n  setIsLoading,\r\n  modalCloseHandle,\r\n}) => {\r\n  const [isPublicState, setisPublicState] = useState(false);\r\n  const [newOpenedToList, setNewOpenedToList] = useState<string[]>([]);\r\n  const [openedToOverlayIsOpen, setOpenedToOverlayIsOpen] = useState(false);\r\n  const {\r\n    selectedImages,\r\n    editImagesInfo,\r\n    getImageById,\r\n    deselectAllImages,\r\n    groupSelectModeToggle,\r\n    imagesMultiuserShare,\r\n  } = store.imagesStoreSettings;\r\n  const { userName, checkIfUserExistsByName } = store.userSettings;\r\n\r\n  const openToOverlayOpenHandler = () => {\r\n    setOpenedToOverlayIsOpen(true);\r\n  };\r\n  const openToOverlayCloseHandler = () => {\r\n    setOpenedToOverlayIsOpen(false);\r\n  };\r\n\r\n  const publicStateChangeHandler = () => {\r\n    setisPublicState(!isPublicState);\r\n  };\r\n  const userAddHandler = async (name: string) => {\r\n    if (name === userName) return;\r\n    const userDoesExist = await checkIfUserExistsByName(name);\r\n    if (userDoesExist && !newOpenedToList.includes(name))\r\n      setNewOpenedToList([...newOpenedToList, name]);\r\n  };\r\n  const userRemoveHandler = (name: string) => {\r\n    setNewOpenedToList(newOpenedToList.filter((userName) => userName !== name));\r\n  };\r\n\r\n  const cancelHandler = () => {\r\n    deselectAllImages();\r\n    groupSelectModeToggle();\r\n    modalCloseHandle();\r\n  };\r\n\r\n  /*\r\n   * Iterating through selectedImages, taking openedTolist - and merging with the newOpenedToList\r\n   * without duplications - using an intermediate Set object, since we have an empty initial newOpenedToList,\r\n   * single for all the selected images. Was told that this way has Big O(n) complexity ))\r\n   */\r\n  const acceptChangesHandler = async () => {\r\n    setIsLoading && setIsLoading(true);\r\n\r\n    const selectedImagesId = selectedImages.map((image) => image.selectedId);\r\n    const updatedImagesInfo: NewImageInfoType[] = selectedImagesId.map(\r\n      (selectedId) => {\r\n        const currentImage = getImageById(selectedId)!;\r\n        const oldOpenedToList = currentImage.imageInfo.openedTo;\r\n        const newOpenedList = [\r\n          ...new Set([...oldOpenedToList, ...newOpenedToList]),\r\n        ];\r\n        const newImageInfo: NewImageInfoType = {\r\n          _id: selectedId,\r\n          imageInfo: { isPublic: isPublicState, openedTo: newOpenedList },\r\n        };\r\n        return newImageInfo;\r\n      }\r\n    );\r\n\r\n    /*\r\n     * Writing the updated images info from the backend to the corresponding images in store.\r\n     */\r\n    await editImagesInfo(updatedImagesInfo);\r\n\r\n    /*\r\n     * Creating the object for imagesMultiuserShare. In this case we only use action: 'add', since\r\n     * we are only adding users to each image openedTo List from the group edit modal - to delete those -\r\n     * we have to do that manually in each image shareOverlay. For now its that way.\r\n     */\r\n\r\n    const usersList: ImageOpenedToUserEntry[] = newOpenedToList.map((name) => ({\r\n      name,\r\n      action: \"add\",\r\n    }));\r\n\r\n    /*\r\n     * Updating each users selectedUsersList list with the list of selectedImagesId.\r\n     * Performing this operation on the backend.\r\n     */\r\n    await imagesMultiuserShare(selectedImagesId, usersList);\r\n    setIsLoading && setIsLoading(false);\r\n    modalCloseHandle();\r\n    deselectAllImages();\r\n    groupSelectModeToggle();\r\n  };\r\n\r\n  return (\r\n    <div className={styles.modalShareForm}>\r\n      {!openedToOverlayIsOpen && !isLoading && (\r\n        <>\r\n          <h2>Sharing options</h2>\r\n          <div className={styles.optionsWrapper}>\r\n            <div className={styles.option}>\r\n              <Checkbox\r\n                className={styles.shareModalCheckbox}\r\n                onChange={publicStateChangeHandler}\r\n                isChecked={isPublicState}\r\n              />\r\n              Make the image public.\r\n            </div>\r\n            <div className={styles.option}>\r\n              <p className={styles.openedTo}>Is opened to users : </p>\r\n              {newOpenedToList.map((entry, index) => (\r\n                <Tag key={index} tagValue={entry} />\r\n              ))}\r\n              <Button\r\n                className={styles.addUserBtn}\r\n                text=\"Edit\"\r\n                title=\"Edit list of users with acces to this image\"\r\n                icon=\"icon_edit\"\r\n                onClick={openToOverlayOpenHandler}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className={styles.buttonWrapper}>\r\n            <Button\r\n              text=\"Accept\"\r\n              type=\"submit\"\r\n              onClick={acceptChangesHandler}\r\n            />\r\n            <Button text=\"Cancel\" onClick={cancelHandler} />\r\n          </div>\r\n        </>\r\n      )}\r\n\r\n      {openedToOverlayIsOpen && !isLoading && (\r\n        <TagEditor\r\n          tags={newOpenedToList}\r\n          closeHandle={openToOverlayCloseHandler}\r\n          onAddTags={userAddHandler}\r\n          onTagDelete={userRemoveHandler}\r\n        />\r\n      )}\r\n      {isLoading && <Spinner side={50} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ModalShare;\r\n"],"names":["isLoading","setIsLoading","modalCloseHandle","useState","isPublicState","setisPublicState","newOpenedToList","setNewOpenedToList","openedToOverlayIsOpen","setOpenedToOverlayIsOpen","store","selectedImages","editImagesInfo","getImageById","deselectAllImages","groupSelectModeToggle","imagesMultiuserShare","userName","checkIfUserExistsByName","userAddHandler","name","includes","acceptChangesHandler","selectedImagesId","map","image","selectedId","updatedImagesInfo","oldOpenedToList","imageInfo","openedTo","newOpenedList","Set","_id","isPublic","usersList","action","className","styles","onChange","isChecked","entry","index","tagValue","text","title","icon","onClick","type","TagEditor","tags","closeHandle","onAddTags","onTagDelete","filter","side"],"sourceRoot":""}